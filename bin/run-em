#!/usr/bin/env node

/*eslint no-console: 0 */
require('babel-core/register');

const api = require('../index');
const pkg = require('../package.json');
const chalk = require('chalk');
const program = require('commander');

program
  .version(pkg.version)
  .arguments('<dir> <script> [args...]')
  .description(`Find all packages in dir and run <script>

  Example: ${ chalk.grey('run-em some/dir test') }`)
  .option('-i, --ignore <folders>', 'List of folders to ignore', split)
  .option('-s, --silent', 'Do not log script output')
  .action((dir, script, args) => {
    const options = { ignore: program.ignore };
    const child = api.run.apply(api, [ dir, script, options, ...args ]);

    if (!program.silent) {
      child.on('data', chunk => console.log(chunk.toString()));
    }

    child.on('error', err => console.error(err));
    child.on('close', () => {
      console.log(chalk.gray('All scripts "%s" finished'), script);
    });
  });

program
  .command('list [dir]')
  .alias('ls')
  .usage('<dir>')
  .description('List all available scripts in dir')
  .option('-i, --ignore <folders>', 'Comma separated list of folders to ignore', split)
  .action(dir => {
    const options = { ignore: program.ignore };

    api.list(dir || process.cwd(), options).then(scripts => {
      Object.keys(scripts).forEach(file => {
        console.log(`\n${ chalk.gray(file) }`);

        scripts[file].forEach(script => {
          console.log(`    ${ chalk.green(script) }`);
        });
      });
    });
  });

program.parse(process.argv);

if (!process.argv.slice(2).length) {
  program.outputHelp();
}

function split(str) {
  return str.split(',');
}
